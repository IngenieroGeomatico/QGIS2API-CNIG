# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QGIS2APICNIGDialog
                                 A QGIS plugin
 Complemento que crea un visualizador cartogr√°fico con el contenido del lieno de QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-12-16
        git sha              : $Format:%H$
        copyright            : (C) 2023 by IngenieroGeomatico
        email                : aurearagon@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from pathlib import Path
import shutil
import webbrowser

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

from qgis.core import QgsProject, QgsMapLayer, QgsWkbTypes, QgsCoordinateTransform, QgsCoordinateReferenceSystem, QgsVectorFileWriter, QgsCoordinateTransformContext
from qgis.gui import QgsMapCanvas
from qgis.utils import iface

from PyQt5 import QtGui, QtWidgets



# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'QGIS2APICNIG_dialog_base.ui'))


class QGIS2APICNIGDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(QGIS2APICNIGDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

    def selectFolder(self):
        dialog = QtWidgets.QFileDialog()
        if self.lineEdit_Folder.text().replace(" ","") == '':
            folder_path = dialog.getExistingDirectory(None, "Selecciona carpeta de salida")
        else:
            folder_path = dialog.getExistingDirectory(self.lineEdit_Folder, "Selecciona carpeta de salida")  

        if folder_path == None or folder_path == "":
            folder_path = self.lineEdit_Folder.text()

        self.lineEdit_Folder.setText(folder_path)
        return folder_path

    def exportMap(self):
        exportFolder = self.lineEdit_Folder.text() + "/QGIS2APICNIG"
        exportFolderSources = self.lineEdit_Folder.text() + "/QGIS2APICNIG/Sources"

        tableOfSources = self.tableWidget_capas
        # print("tableOfSources.columnCount(): ", tableOfSources.columnCount())
        # print("tableOfSources.rowCount(): ", tableOfSources.rowCount())

        layers = []
        controls = []
        plugins = []
        # Contenido de la tabla:
        # [ 0-> capa superpuesta, 1-> visible, 2-> tipo de capa, 3-> fuente de la capa, 4-> nombre]
        for r in range(tableOfSources.rowCount()):
            layer={
                'layerSourceType':'',
                'url_path':'',
                'format':'',
                'style':'',
                'nameLayer':'',
                'nameLegend':'',
                'visible':0,
                'isLocal':0,
                'dataSourceUri':'',
                'QGISlayer':'',
                'exportFolderSources':exportFolderSources
            }
            for c in range(tableOfSources.columnCount()):
                item = tableOfSources.item(r, c)
                if item == None:
                    cell_widget = tableOfSources.cellWidget(r, c)
                    if cell_widget is not None:
                        chk_box = cell_widget.findChild(QtWidgets.QCheckBox).isChecked()
                        # c = 0 --> capa supuerpuesta
                        if c == 0:
                            # print('check capa superpuesta:  ',chk_box)
                            if chk_box == False:
                                break
                        # c = 1 --> capa visible
                        elif c == 1:
                            # print('check visible:  ',chk_box)
                            layer['visible'] = chk_box
                            continue
                else:
                    text = str(item.text())

                    # c = 2 --> tipo de capa
                    if c == 2:
                        # print('tipo de la capa: ',text)
                        pass
                    
                    # c = 3 --> fuente de la capa
                    elif c == 3:
                        # print('fuente de la capa: ',text)
                        layer['layerSourceType'] = text
                    
                    # c = 4 --> nombre
                    elif c == 4:
                        QGISlayer = QgsProject.instance().mapLayersByName(text)[0]
                        layer['QGISlayer'] = QGISlayer
                        # print('nombre de la capa: ',QGISlayer.name())
                        layer['nameLegend'] = QGISlayer.name()
                        layer['dataSourceUri'] = QGISlayer.dataProvider().dataSourceUri()

            layers.append( self.JSONLayer2StringLayer(layer) )      
        
        layers = list(filter( lambda k: '' != k, layers ))        
        layers = list(reversed(layers))               

        
        extentQGIS = iface.mapCanvas().extent()
        CRSQGIS = QgsProject.instance().crs()
        ct = QgsCoordinateTransform(CRSQGIS, QgsCoordinateReferenceSystem('EPSG:3857'), QgsProject.instance())
        bounds_crs = ct.transformBoundingBox(extentQGIS)
        bbox = [ bounds_crs.xMinimum() , bounds_crs.yMinimum() , bounds_crs.xMaximum() , bounds_crs.yMaximum() ]
        
        
        if Path(exportFolder).exists() == True:
            shutil.rmtree(exportFolder)
        Path(exportFolder).mkdir(parents=True, exist_ok=True)
        Path(exportFolderSources).mkdir(parents=True, exist_ok=True)
        fileMap=exportFolder + '/index.html'

        with open(fileMap, 'w') as filetowrite:
            filetowrite.write( self.CreateHTML(bbox, layers) )

        webbrowser.open(fileMap,new=2)
        self.close ()
        return

    def JSONLayer2StringLayer(self, layer):
        stringLayer = ''
        print(' * * * * * * * * * * * * * * *')
        print(layer['dataSourceUri'])
        print(' * * * * * * * * * * * * * * *')

        if layer['layerSourceType'] == 'XYZ':
            urlURI = list(filter( lambda k: 'url=' in k, layer['dataSourceUri'].split('&') ))[0]

            if urlURI:
                url = urlURI.split('=')[1]
                url = url.replace('%7B','{')
                url = url.replace('%7D','}')

            stringLayer="""
                                mapajs.addXYZ(
                                    new M.layer.XYZ({{
                                        url: '{url}',
                                        name: '{name}',
                                        visibility: {visible},
                                    }})
                                );
                                """.format(
                                    url = url,
                                    name = layer['nameLegend'],
                                    visible = str(layer['visible']).lower()

                                )

        elif layer['layerSourceType'] == 'TMS':
            urlURI = list(filter( lambda k: 'url=' in k, layer['dataSourceUri'].split('&') ))[0]

            if urlURI:
                url = urlURI.split('=')[1]
                url = url.replace('%7B','{')
                url = url.replace('%7D','}')

            stringLayer="""
                                mapajs.addTMS(
                                    new M.layer.TMS({{
                                        url: '{url}',
                                        name: '{name}',
                                        visibility: {visible},
                                    }})
                                );
                                """.format(
                                    url = url,
                                    name = layer['nameLegend'],
                                    visible = str(layer['visible']).lower()

                                )

        elif layer['layerSourceType'] == 'WMTS':
            urlURI = list(filter( lambda k: 'url=' in k, layer['dataSourceUri'].split('&') ))[0]
            formatURI = list(filter( lambda k: 'format=' in k, layer['dataSourceUri'].split('&') ))[0]
            layerURI = list(filter( lambda k: 'layers=' in k, layer['dataSourceUri'].split('&') ))[0]
            stylesURI = list(filter( lambda k: 'styles=' in k, layer['dataSourceUri'].split('&') ))[0]

            if urlURI:
                url = urlURI.split('=')[1]
            if formatURI:
                formatWMTS = formatURI.split('=')[1]
            if layerURI:
                layerWMTS = layerURI.split('=')[1]
            if stylesURI:
                styleWMTS = stylesURI.split('=')[1]

            stringLayer="""
                                mapajs.addWMTS(
                                    new M.layer.WMTS({{
                                        url: '{url}',
                                        name: "{layerWMTS}",
                                        legend: "{name}",
                                        visibility: {visible},
                                        }},
                                        {{
                                            format: '{formatWMTS}'
                                        }})
                                );
                                """.format(
                                    url = url,
                                    name = layer['nameLegend'],
                                    visible = str(layer['visible']).lower(),
                                    formatWMTS=formatWMTS,
                                    layerWMTS=layerWMTS,
                                )

        elif layer['layerSourceType'] == 'WMS':
            urlURI = list(filter( lambda k: 'url=' in k, layer['dataSourceUri'].split('&') ))[0]
            formatURI = list(filter( lambda k: 'format=' in k, layer['dataSourceUri'].split('&') ))[0]
            layerURI = list(filter( lambda k: 'layers=' in k, layer['dataSourceUri'].split('&') ))[0]
            if 'styles=' in layer['dataSourceUri']:
                stylesURI = list(filter( lambda k: 'styles=' in k, layer['dataSourceUri'].split('&') ))[0]
            else:
                stylesURI = None

            if urlURI:
                url = urlURI.split('=')[1]
            if formatURI:
                formatWMS = formatURI.split('=')[1]
            if layerURI:
                layerWMS = layerURI.split('=')[1]
            if stylesURI:
                styleWMS = stylesURI.split('=')[1]

            stringLayer="""
                                mapajs.addWMS(
                                     new M.layer.WMS({{
                                            url: '{url}',
                                            name: "{layerWMS}",
                                            legend: "{name}",
                                            tiled: false,
                                            visibility: {visible},
                                        }}, 
                                        {{
                                            format: '{formatWMS}'
                                        }})
                                );
                                """.format(
                                    url = url,
                                    name = layer['nameLegend'],
                                    visible = str(layer['visible']).lower(),
                                    formatWMS=formatWMS,
                                    layerWMS=layerWMS,
                                )
        
        elif layer['layerSourceType'] == 'OGC WFS (Web Feature Service)':

            urlURI = list(filter( lambda k: 'url=' in k, layer['dataSourceUri'].split(' ') ))[0]
            layerURI = list(filter( lambda k: 'typename=' in k, layer['dataSourceUri'].split(' ') ))[0]

            if urlURI:
                url = urlURI.split('=')[1]
            if layerURI:
                layerWFS = layerURI.split('=')[1]

            stringLayer="""
                                mapajs.addWFS(
                                     new M.layer.WFS({{
                                            url: {url}, 
                                            name: {layerWFS},
                                            legend: "{name}",
                                            extract: true,
                                        }}, {{
                                        // aplica un estilo a la capa
                                            style: new M.style.Generic({{
                                                point: {{
                                                    fill: {{  
                                                        color: 'orange',
                                                    }}
                                                }},
                                                polygon: {{
                                                    fill: {{
                                                        color: 'orange',
                                                        opacity: 0.5,
                                                    }},
                                                    stroke: {{
                                                        color: 'red',
                                                        width: 2
                                                    }}
                                                }},
                                                line: {{
                                                    fill: {{
                                                        color: 'orange',
                                                        width: 2
                                                    }}
                                                }}
                                            }}),
                                            visibility: {visible} // capa no visible en el mapa
                                        }}, {{
                                            opacity: 1 // aplica opacidad a la capa
                                        }})
                                );
                                """.format(
                                    url = url,
                                    name = layer['nameLegend'],
                                    visible = str(layer['visible']).lower(),
                                    layerWFS=layerWFS,
                                )
        
        elif layer['layerSourceType'] == 'GeoJSON':

            if 'http' in layer['dataSourceUri']:
                urlURI = layer['dataSourceUri'].split('|')[0]
                layerURI = list(filter( lambda k: 'layername=' in k, layer['dataSourceUri'].split('|') ))[0]

                if urlURI:
                    url = urlURI.replace('/vsicurl/','')
                if layerURI:
                    layerGJSON = layerURI.split('=')[1]

                stringLayer="""
                                mapajs.addLayers(
                                     new M.layer.GeoJSON({{
                                            url: '{url}', 
                                            name: '{layerGJSON}',
                                            legend: "{name}",
                                            extract: true,
                                        }}, {{
                                        // aplica un estilo a la capa
                                            style: new M.style.Generic({{
                                                point: {{
                                                    fill: {{  
                                                        color: 'orange',
                                                    }}
                                                }},
                                                polygon: {{
                                                    fill: {{
                                                        color: 'orange',
                                                        opacity: 0.5,
                                                    }},
                                                    stroke: {{
                                                        color: 'red',
                                                        width: 2
                                                    }}
                                                }},
                                                line: {{
                                                    fill: {{
                                                        color: 'orange',
                                                        width: 2
                                                    }}
                                                }}
                                            }}),
                                            visibility: {visible} // capa no visible en el mapa
                                        }}, {{
                                            opacity: 1 // aplica opacidad a la capa
                                        }})
                                );
                                """.format(
                                    url = url,
                                    name = layer['nameLegend'],
                                    visible = str(layer['visible']).lower(),
                                    layerGJSON=layerGJSON,
                                )
            
            else:
                # Guardar la capa vectorial como geojson en local y hacerle el trapis para que pueda leerlo en local como objeto JS
                options = QgsVectorFileWriter.SaveVectorOptions()
                options.driverName = 'GeoJSON'
                options.fileEncoding = 'utf-8'
                options.layerOptions = ['COORDINATE_PRECISION=8']
                options.onlySelectedFeatures = True
                print(layer['QGISlayer'].crs())
                QgsVectorFileWriter.writeAsVectorFormatV3( layer  = layer['QGISlayer'], 
                                                           fileName = layer['exportFolderSources']+'/'+layer['nameLegend']+'.js', 
                                                           transformContext = QgsCoordinateTransformContext.addSourceDestinationDatumTransform( layer['QGISlayer'].crs(), QgsCoordinateReferenceSystem("EPSG:4326")),
                                                           options = options
                )
                pass
        elif layer['layerSourceType'] == 'Memory storage':
            pass

        elif layer['layerSourceType'] == 'OGC API - Features':
            pass

        elif layer['layerSourceType'] == 'LIBKML':
            pass

        return stringLayer

    def CreateHTML(self, bbox, layers):

        layersString = ''
        for l in layers:
            layersString = layersString + l
        html = """<html>
                        <head>
                            <meta charset="UTF-8">
                            <title>Visualizador API-CNIG</title>
                            
                            <!-- Estilo de la API -->
                            <link type="text/css" rel="stylesheet" href="https://componentes.cnig.es/api-core/assets/css/apiign.ol.min.css">
                            
                            <style type="text/css">
                                html,
                                body {{
                                    margin: 0;
                                    padding: 0;
                                    height: 100%;
                                    overflow: hidden;
                                }}
                            </style>
                            
                            <!-- Ficheros javascript de la API -->
                            <script type="text/javascript" src="https://componentes.cnig.es/api-core/vendor/browser-polyfill.js"></script>
                            <script type="text/javascript" src="https://componentes.cnig.es/api-core/js/apiign.ol.min.js"></script>
                            <script type="text/javascript" src="https://componentes.cnig.es/api-core/js/configuration.js"></script>
                            
                        </head>
                        
                        <body>
                            <!-- Contenedor principal del mapa -->
                            <div id="mapaJS_div" class="m-container"></div>
                            
                            <script type="text/javascript">
                                
                                // Configuraci√≥n del mapa
                                let zoomInicial = 5
                                let longLatInicial = [-3, 40]
                                const zoom_p = M.config.MAP_VIEWER_ZOOM || zoomInicial;
                                const center_p = M.config.MAP_VIEWER_CENTER || ol.proj.fromLonLat(longLatInicial);
                                
                                M.proxy(false) // Necesario para ejecutar el visualizador en local.
                                const mapajs = M.map({{
                                    container: 'mapaJS_div',
                                    controls: ['backgroundlayers'],
                                    bbox: {bbox}
                                }});
                                
                                const layers_p = M.config.MAP_VIEWER_LAYERS || [];
                                mapajs.addLayers(layers_p)

                                {layers}
                                
                            </script>
                        </body>
                    </html>""".format(
                                    bbox = bbox,
                                    layers = layersString
                                )
        return html
