# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QGIS2APICNIGDialog
                                 A QGIS plugin
 Complemento que crea un visualizador cartogr√°fico con el contenido del lieno de QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-12-16
        git sha              : $Format:%H$
        copyright            : (C) 2023 by IngenieroGeomatico
        email                : aurearagon@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from pathlib import Path

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

from qgis.core import QgsProject, QgsMapLayer, QgsWkbTypes

from PyQt5 import QtGui, QtWidgets



# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'QGIS2APICNIG_dialog_base.ui'))


class QGIS2APICNIGDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(QGIS2APICNIGDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

    def selectFolder(self):
        dialog = QtWidgets.QFileDialog()
        if self.lineEdit_Folder.text().replace(" ","") == '':
            folder_path = dialog.getExistingDirectory(None, "Selecciona carpeta de salida")
        else:
            folder_path = dialog.getExistingDirectory(self.lineEdit_Folder, "Selecciona carpeta de salida")  

        if folder_path == None or folder_path == "":
            folder_path = self.lineEdit_Folder.text()

        self.lineEdit_Folder.setText(folder_path)
        return folder_path

    def exportMap(self):
        tableOfSources = self.tableWidget_capas
        print("tableOfSources.columnCount(): ", tableOfSources.columnCount())
        print("tableOfSources.rowCount(): ", tableOfSources.rowCount())
        for r in range(tableOfSources.rowCount()):
            for c in range(tableOfSources.columnCount()):
                item = tableOfSources.item(r, c)
                if item == None:
                    print("tableOfSources.item(r, c): ",tableOfSources.item(r, c))
                    cell_widget = tableOfSources.cellWidget(r, c)
                    if cell_widget is not None:
                        chk_box = cell_widget.findChild(QtWidgets.QCheckBox).isChecked()
                        print(chk_box)
                    continue
                text = str(item.text())
                print(text)

                if c == tableOfSources.columnCount()-1:
                    layer = QgsProject.instance().mapLayersByName(text)[0]
                    print(layer)
        print(' 0 0 0 0 0 0 0 0 0 0 0 0 0 ')
        print(self.lineEdit_Folder.text())
        print(' 0 0 0 0 0 0 0 0 0 0 0 0 0 ')
        exportFolder = self.lineEdit_Folder.text() + "/QGIS2APICNIG"
        exportFolderSources = self.lineEdit_Folder.text() + "/QGIS2APICNIG/Sources"
        Path(exportFolder).mkdir(parents=True, exist_ok=True)
        Path(exportFolderSources).mkdir(parents=True, exist_ok=True)
        fileMap=exportFolder + '/index.html'
        with open(fileMap, 'w') as filetowrite:
            filetowrite.write('new content')
        return
