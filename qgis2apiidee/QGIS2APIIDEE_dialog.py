# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QGIS2APIIDEEDialog
                                 A QGIS plugin
 Complemento que crea un visualizador cartográfico con el contenido del lienzo de QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-12-16
        git sha              : $Format:%H$
        copyright            : (C) 2023 by IngenieroGeomatico
        email                : aurearagon@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from pathlib import Path
import shutil
import webbrowser
import urllib.parse

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

from qgis.core import (
    QgsProject, QgsMapLayer, QgsWkbTypes, QgsCoordinateTransform,
    QgsCoordinateReferenceSystem, QgsVectorFileWriter, QgsCoordinateTransformContext,
    QgsMessageLog
)
from qgis.gui import QgsMapCanvas
from qgis.utils import iface, Qgis

from PyQt5 import QtGui, QtWidgets, QtCore

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'QGIS2APIIDEE_dialog_base.ui'))


class QGIS2APIIDEEDialog(QtWidgets.QDialog, FORM_CLASS):

    def __init__(self, parent=None):
        super(QGIS2APIIDEEDialog, self).__init__(parent)
        self.setupUi(self)

    # --- Métodos auxiliares ---

    def _save_vector_layer_as_geojson(self, layer, export_folder, name):
        """Guarda una capa vectorial como GeoJSON y devuelve el nombre de variable JS."""
        path = f"{export_folder}/{name}.js"
        options = ["COORDINATE_PRECISION=6"]
        e, err = QgsVectorFileWriter.writeAsVectorFormat(
            layer, path + '_tmp', "utf-8",
            QgsCoordinateReferenceSystem("EPSG:4326"),
            'GeoJson', 0, layerOptions=options
        )
        if e == QgsVectorFileWriter.NoError:
            with open(path, mode="w", encoding="utf8") as f:
                f.write(f"var {name} = ")
                with open(path + '_tmp', encoding="utf8") as tmpFile:
                    for line in tmpFile:
                        f.write(line.strip("\n\t "))
            os.remove(path + '_tmp')
            return name
        else:
            QgsMessageLog.logMessage(
                f"Could not write json file {path}: {err}",
                "QGIS2APIIDEE", level=Qgis.Critical)
            return None

    def _get_url_param(self, uri, param, sep='&'):
        """Extrae el valor de un parámetro de una URI."""
        try:
            return next(filter(lambda k: f'{param}=' in k, uri.split(sep))).split('=')[1]
        except StopIteration:
            return None

    def selectFolder(self):
        dialog = QtWidgets.QFileDialog()
        if self.lineEdit_Folder.text().replace(" ", "").replace("—", "_") == '':
            folder_path = dialog.getExistingDirectory(None, "Selecciona carpeta de salida")
        else:
            folder_path = dialog.getExistingDirectory(self.lineEdit_Folder, "Selecciona carpeta de salida")

        if folder_path is None or folder_path == "":
            folder_path = self.lineEdit_Folder.text()

        self.lineEdit_Folder.setText(folder_path)
        return folder_path

    def exportMap(self):
        projectSource = "/QGIS2APIIDEE"
        sourceFolder = "/Sources"
        JSFolder = "/JS"
        CSSFolder = "/CSS"
        pluginQGIS2APIIDEE = "/pluginQGIS2APIIDEE"

        exportFolder = self.lineEdit_Folder.text() + projectSource
        exportFolderSources = self.lineEdit_Folder.text() + projectSource + sourceFolder
        exportJSFolder = self.lineEdit_Folder.text() + projectSource + JSFolder
        exportCSSFolder = self.lineEdit_Folder.text() + projectSource + CSSFolder

        exportPluginQGIS2APIIDEE = self.lineEdit_Folder.text() + projectSource + pluginQGIS2APIIDEE

        if Path(exportFolder).exists():
            shutil.rmtree(exportFolder)

        Path(exportFolder).mkdir(parents=True, exist_ok=True)
        Path(exportFolderSources).mkdir(parents=True, exist_ok=True)
        Path(exportJSFolder).mkdir(parents=True, exist_ok=True)
        Path(exportCSSFolder).mkdir(parents=True, exist_ok=True)

        # Obtención de extensiones personalizadas QGIS2APIIDEE
        checkBox_ComparacionMapas = self.checkBox_ComparacionMapas.isChecked()
        if checkBox_ComparacionMapas:
            Path(exportPluginQGIS2APIIDEE).mkdir(parents=True, exist_ok=True)
            shutil.copytree(os.path.dirname(__file__) + '/customPlugins/comparadorMapas',
                            exportPluginQGIS2APIIDEE + '/comparadorMapas', dirs_exist_ok=True)
            shutil.copytree(os.path.dirname(__file__) + '/customPlugins/viglino',
                            exportPluginQGIS2APIIDEE + '/viglino', dirs_exist_ok=True)

        fileMap = exportFolder + '/index.html'
        fileJS = exportJSFolder + '/QGIS2APIIDEE.js'
        fileCSS = exportCSSFolder + '/QGIS2APIIDEE.css'

        tableOfSources = self.tableWidget_capas

        layers = []
        controls = []
        plugins = []
        pluginImports = []

        initialZIndexLayer = 100
        for r in range(tableOfSources.rowCount()):
            layer = {
                'layerSourceType': '',
                'url_path': '',
                'format': '',
                'style': '',
                'nameLayer': '',
                'nameLegend': '',
                'visible': 0,
                'isLocal': 0,
                'dataSourceUri': '',
                'source': '',
                'QGISlayer': '',
                'sourceFolder': sourceFolder,
                'exportFolderSources': exportFolderSources,
                'zIndex': initialZIndexLayer - r
            }

            for c in range(tableOfSources.columnCount()):
                item = tableOfSources.item(r, c)
                if item is None:
                    cell_widget = tableOfSources.cellWidget(r, c)
                    if cell_widget is not None:
                        chk_box = cell_widget.findChild(QtWidgets.QCheckBox).isChecked()
                        if c == 0 and not chk_box:
                            break
                        elif c == 1:
                            layer['visible'] = chk_box
                            continue
                else:
                    text = str(item.text())
                    if c == 3:
                        layer['layerSourceType'] = text
                    elif c == 4:
                        QGISlayer = QgsProject.instance().mapLayersByName(text)[0]
                        layer['QGISlayer'] = QGISlayer
                        layer['nameLegend'] = QGISlayer.name()
                        layer['dataSourceUri'] = QGISlayer.dataProvider().dataSourceUri()
                        layer['source'] = QGISlayer.source()
                        if layer['dataSourceUri'] == '':
                            layer['dataSourceUri'] = layer['source']
                if c == tableOfSources.columnCount() - 1:
                    layers.append(self.JSONLayer2StringLayer(layer))

        layers = list(filter(lambda k: '' != k, layers))
        layers = list(reversed(layers))

        # Controles
        if self.checkBox_CapasBase.isChecked():
            controls.append('backgroundlayers')
        if self.checkBox_Rotacion.isChecked():
            controls.append('rotate')
        if self.checkBox_Localizacion.isChecked():
            controls.append('location')
        if self.checkBox_EscalaZoom.isChecked():
            controls.append('scale')
        if self.checkBox_ZoomBotones.isChecked():
            controls.append('panzoom')
        if self.checkBox_ZoomBarrita.isChecked():
            controls.append('panzoombar')
        if self.checkBox_EscalaGrafica.isChecked():
            controls.append('scaleline')

        # Plugins
        if self.checkBox_SelectorCapas.isChecked():
            headerImports = """
                <link href="https://componentes.idee.es/api-idee/plugins/layerswitcher/layerswitcher-1.0.0.ol.min.css" rel="stylesheet" />
                <script type="text/javascript" src="https://componentes.idee.es/api-idee/plugins/layerswitcher/layerswitcher-1.0.0.ol.min.js"></script>
            """
            stringplugin = """
                const mp_selectorCapa = new IDEE.plugin.Layerswitcher({
                        position: 'TR',
                        collapsed: false,
                        collapsible: true,
                        https: true,
                        http: true,
                        showCatalog: true,
                        displayLabel: false,
                        addLayers: true,
                        statusLayers: true,
                        modeSelectLayers: 'eyes',
                        isMoveLayers: true,
                        tools: ['transparency', 'legend', 'zoom', 'information', 'style', 'delete']
                    });
                mapajs.addPlugin(mp_selectorCapa);
            """
            pluginImports.append(headerImports)
            plugins.append(stringplugin)

        extentQGIS = iface.mapCanvas().extent()
        CRSQGIS = QgsProject.instance().crs()
        ct = QgsCoordinateTransform(CRSQGIS, QgsCoordinateReferenceSystem('EPSG:3857'), QgsProject.instance())
        bounds_crs = ct.transformBoundingBox(extentQGIS)
        bbox = [bounds_crs.xMinimum(), bounds_crs.yMinimum(), bounds_crs.xMaximum(), bounds_crs.yMaximum()]

        with open(fileJS, 'w') as filetowrite:
            filetowrite.write(self.CreateJS(bbox, layers, controls, plugins))

        with open(fileCSS, 'w') as filetowrite:
            filetowrite.write(self.CreateCSS())

        with open(fileMap, 'w') as filetowrite:
            filetowrite.write(self.CreateHTML(pluginImports, checkBox_ComparacionMapas))

        webbrowser.open(fileMap, new=2)
        self.close()
        return

    # --- Refactorización de JSONLayer2StringLayer ---

    def JSONLayer2StringLayer(self, layer):
        tipo = layer['layerSourceType']
        name = layer['nameLegend'].replace(" ", "").replace("—", "_")
        uri = layer['dataSourceUri']

        if tipo == 'XYZ':
            url = urllib.parse.unquote(self._get_url_param(uri, 'url'))
            return self._layer_xyz(url, name, layer)
        elif tipo == 'TMS':
            url = urllib.parse.unquote(self._get_url_param(uri, 'url'))
            return self._layer_tms(url, name, layer)
        elif tipo == 'GeoTIFF':
            url = uri.replace("/vsicurl/", "")
            return self._layer_geotiff(url, name, layer)
        elif tipo == 'WMTS':
            return self._layer_wmts(uri, name, layer)
        elif tipo == 'WMS':
            return self._layer_wms(uri, name, layer)
        elif tipo == 'OGC WFS (Web Feature Service)':
            return self._layer_wfs(uri, name, layer)
        elif tipo == 'GeoJSON':
            return self._layer_geojson(layer, name)
        elif tipo == 'Memory storage':
            return self._layer_memory(layer, name)
        elif tipo == 'OGC API - Features':
            return self._layer_ogc_api_features(uri, name, layer)
        elif tipo == 'LIBKML':
            return self._layer_libkml(layer, name)
        elif tipo == 'MVT':
            url = self._get_url_param(uri, 'url')
            return self._layer_mvt(url, name, layer)
        elif tipo == 'MapLibre':
            url = self._get_url_param(uri, 'styleUrl')
            return self._layer_maplibre(url, name, layer)
        elif layer['QGISlayer'].type() == QgsMapLayer.VectorLayer:
            return self._layer_vector(layer, name)
        else:
            return ''

    # --- Métodos por tipo de capa ---

    def _layer_xyz(self, url, name, layer):
        return f"""
            mapajs.addXYZ(
                new IDEE.layer.XYZ({{
                    url: '{url}',
                    name: '{name}',
                    visibility: {str(layer['visible']).lower()},
                    legend: '{name}',
                }})
            );
            mapajs.getLayers().filter((layer) => layer.legend == "{name}")[0].setZIndex({layer['zIndex']})
        """

    def _layer_tms(self, url, name, layer):
        return f"""
            mapajs.addTMS(
                new IDEE.layer.TMS({{
                    url: '{url}',
                    name: '{name}',
                    visibility: {str(layer['visible']).lower()},
                    legend: '{name}',
                }})
            );
            mapajs.getLayers().filter((layer) => layer.legend == "{name}")[0].setZIndex({layer['zIndex']})
        """

    def _layer_geotiff(self, url, name, layer):
        return f"""
            mapajs.addGeoTIFF(
                new IDEE.layer.GeoTIFF({{
                    url: '{url}',
                    name: '{name}',
                    visibility: {str(layer['visible']).lower()},
                    legend: '{name}',
                }})
            );
            mapajs.getLayers().filter((layer) => layer.legend == "{name}")[0].setZIndex({layer['zIndex']})
        """

    def _layer_wmts(self, uri, name, layer):
        return f"""
            mapajs.addWMTS(
                new IDEE.layer.WMTS({{
                    url: '{uri}',
                    name: '{name}',
                    visibility: {str(layer['visible']).lower()},
                    legend: '{name}',
                }})
            );
            mapajs.getLayers().filter((layer) => layer.legend == "{name}")[0].setZIndex({layer['zIndex']})
        """

    def _layer_wms(self, uri, name, layer):
        return f"""
            mapajs.addWMS(
                new IDEE.layer.WMS({{
                    url: '{uri}',
                    name: '{name}',
                    visibility: {str(layer['visible']).lower()},
                    legend: '{name}',
                }})
            );
            mapajs.getLayers().filter((layer) => layer.legend == "{name}")[0].setZIndex({layer['zIndex']})
        """

    def _layer_wfs(self, uri, name, layer):
        return f"""
            mapajs.addWFS(
                new IDEE.layer.WFS({{
                    url: '{uri}',
                    name: '{name}',
                    visibility: {str(layer['visible']).lower()},
                    legend: '{name}',
                }})
            );
            mapajs.getLayers().filter((layer) => layer.legend == "{name}")[0].setZIndex({layer['zIndex']})
        """

    def _layer_geojson(self, layer, name):
        # Aquí puedes añadir la lógica para exportar la capa como GeoJSON si lo necesitas
        return f"""
            mapajs.addGeoJSON(
                new IDEE.layer.GeoJSON({{
                    url: '{layer['dataSourceUri']}',
                    name: '{name}',
                    visibility: {str(layer['visible']).lower()},
                    legend: '{name}',
                }})
            );
            mapajs.getLayers().filter((layer) => layer.legend == "{name}")[0].setZIndex({layer['zIndex']})
        """

    def _layer_memory(self, layer, name):
        # Aquí puedes añadir la lógica para capas en memoria
        return f"""
            // Capa en memoria: {name}
        """

    def _layer_ogc_api_features(self, uri, name, layer):
        return f"""
            mapajs.addOGCAPIFeatures(
                new IDEE.layer.OGCAPIFeatures({{
                    url: '{uri}',
                    name: '{name}',
                    visibility: {str(layer['visible']).lower()},
                    legend: '{name}',
                }})
            );
            mapajs.getLayers().filter((layer) => layer.legend == "{name}")[0].setZIndex({layer['zIndex']})
        """

    def _layer_libkml(self, layer, name):
        return f"""
            mapajs.addKML(
                new IDEE.layer.KML({{
                    url: '{layer['dataSourceUri']}',
                    name: '{name}',
                    visibility: {str(layer['visible']).lower()},
                    legend: '{name}',
                }})
            );
            mapajs.getLayers().filter((layer) => layer.legend == "{name}")[0].setZIndex({layer['zIndex']})
        """

    def _layer_mvt(self, url, name, layer):
        return f"""
            mapajs.addMVT(
                new IDEE.layer.MVT({{
                    url: '{url}',
                    name: '{name}',
                    visibility: {str(layer['visible']).lower()},
                    legend: '{name}',
                }})
            );
            mapajs.getLayers().filter((layer) => layer.legend == "{name}")[0].setZIndex({layer['zIndex']})
        """

    def _layer_maplibre(self, url, name, layer):
        return f"""
            mapajs.addMapLibre(
                new IDEE.layer.MapLibre({{
                    styleUrl: '{url}',
                    name: '{name}',
                    visibility: {str(layer['visible']).lower()},
                    legend: '{name}',
                }})
            );
            mapajs.getLayers().filter((layer) => layer.legend == "{name}")[0].setZIndex({layer['zIndex']})
        """

    def _layer_vector(self, layer, name):
        # Aquí puedes añadir la lógica para exportar la capa vectorial como GeoJSON
        return f"""
            // Capa vectorial: {name}
        """


    def QGISStyle2APICNIGStyle(self, qgisLayerLegend):

        qgisLayer= QgsProject.instance().mapLayersByName(qgisLayerLegend)[0]

        typeStyle = qgisLayer.renderer().type()

        try:
            legendClassificationAttribute = qgisLayer.renderer().legendClassificationAttribute()
        except Exception as e:
            legendClassificationAttribute = "- - -"

        # Una capa puede tener más de une stilo, por lo que cuando en apicnig se permita un array de estilos, 
        # se podrá añadir cada estilo de qgis como un array desde un bucle.
        # De momento se coge el elemento 0
        
        try:
            propertiesStyle = qgisLayer.renderer().symbol().symbolLayer(0).properties()
        except Exception as e:
            propertiesStyle = "- - -"
        try:
            CategorizedSymbolStyle = qgisLayer.renderer().symbol().symbolLayer(0).properties()
        except Exception as e:
            propertiesStyle = "- - -"

        # print('_____________________________')
        # print('typeStyle  :',typeStyle)
        # print('legendClassificationAttribute  :',legendClassificationAttribute)
        # print('propertiesStyle :',propertiesStyle)
        # print('_____________________________')

        returnStyleDefault = True

        if typeStyle == 'singleSymbol':
            # print('/////////////')
            # print(typeStyle)
            # print(qgisLayer.renderer())
            # print('/////////////')

            
            if 'color' in propertiesStyle:
                fillColorRGBA_list= propertiesStyle['color'].split(',')
            else:
                fillColorRGBA_list= [255, 153, 0, 255/2]

            fillColorRGB = '''rgb({r}, {g}, {b})'''.format(
                r = int(fillColorRGBA_list[0]),
                g = int(fillColorRGBA_list[1]),
                b = int(fillColorRGBA_list[2]),
            )
            
            fillOpacity = int(fillColorRGBA_list[3]) / 255 

            if 'outline_color' in propertiesStyle:
                strokeColorRGBA_list= propertiesStyle['outline_color'].split(',')
            else:
                strokeColorRGBA_list= [255, 102, 0, 255]

            strokeColorRGB = '''rgb({r}, {g}, {b})'''.format(
                r = int(strokeColorRGBA_list[0]),
                g = int(strokeColorRGBA_list[1]),
                b = int(strokeColorRGBA_list[2]),
            )
            strokeOpacity = int(strokeColorRGBA_list[3]) / 255 

            if 'outline_color' in propertiesStyle:
                strokeWidth = float(propertiesStyle['outline_width'])
            else:
                strokeWidth = float(2)

            APICNIGStyle = '''new IDEE.style.Generic({{
                                            point: {{
                                                fill: {{
                                                    color: '{fillColorRGB}',
                                                    opacity: {fillOpacity},
                                                }},
                                                stroke: {{
                                                    color: '{strokeColorRGB}',
                                                    opacity: {strokeOpacity},
                                                    width: {strokeWidth}, 
                                                }}
                                            }},
                                            polygon: {{
                                                fill: {{
                                                    color: '{fillColorRGB}',
                                                    opacity: {fillOpacity},
                                                }},
                                                stroke: {{
                                                    color: '{strokeColorRGB}',
                                                    opacity: {strokeOpacity},
                                                    width: {strokeWidth}, 
                                                }}
                                            }},
                                            line: {{
                                                fill: {{
                                                    color: '{fillColorRGB}',
                                                    opacity: {fillOpacity},
                                                }},
                                                stroke: {{
                                                    color: '{strokeColorRGB}',
                                                    opacity: {strokeOpacity},
                                                    width: {strokeWidth}, 
                                                }}
                                            }}
                                        }})'''.format(
                                                fillColorRGB = fillColorRGB,
                                                fillOpacity=fillOpacity,
                                                strokeColorRGB=strokeColorRGB,
                                                strokeOpacity=strokeOpacity,
                                                strokeWidth =strokeWidth,
                                        )
            
            returnStyleDefault = False
        
        elif typeStyle == 'basic':
            # print('/////////////')
            # qgisLayer= QgsProject.instance().mapLayersByName('UA_VT')[0]
            # qgisLayer.renderer().styles()[0].symbol().symbolLayers()
            # print(qgisLayer.renderer())

            lineStyle = 'line:{}'
            polygonStyle = 'polygon:{}'
            pointStyle = 'point:{}'
            for style in qgisLayer.renderer().styles():
                # print(style.symbol())
                # print(style.symbol().type(), str(style.symbol().type()))
                # print(style.symbol().symbolLayer(0).properties())

                propertiesStyle = style.symbol().symbolLayer(0).properties()
                

                if 'color' in propertiesStyle:
                    fillColorRGBA_list= propertiesStyle['color'].split(',')
                else:
                    fillColorRGBA_list= [255, 153, 0, 255/2]

                fillColorRGB = '''rgb({r}, {g}, {b})'''.format(
                    r = int(fillColorRGBA_list[0]),
                    g = int(fillColorRGBA_list[1]),
                    b = int(fillColorRGBA_list[2]),
                )
                
                fillOpacity = int(fillColorRGBA_list[3]) / 255 

                if 'outline_color' in propertiesStyle:
                    strokeColorRGBA_list= propertiesStyle['outline_color'].split(',')
                else:
                    strokeColorRGBA_list= [255, 102, 0, 255]

                strokeColorRGB = '''rgb({r}, {g}, {b})'''.format(
                    r = int(strokeColorRGBA_list[0]),
                    g = int(strokeColorRGBA_list[1]),
                    b = int(strokeColorRGBA_list[2]),
                )
                strokeOpacity = int(strokeColorRGBA_list[3]) / 255 

                if 'outline_color' in propertiesStyle:
                    strokeWidth = float(propertiesStyle['outline_width'])
                else:
                    strokeWidth = float(2)

                if str(style.symbol().type()) == 'SymbolType.Fill':
                    polygonStyle = '''
                        polygon: {{
                                    fill: {{
                                        color: '{fillColorRGB}',
                                        opacity: {fillOpacity},
                                    }},
                                    stroke: {{
                                        color: '{strokeColorRGB}',
                                        opacity: {strokeOpacity},
                                        width: {strokeWidth}, 
                                    }}
                                }}
                    '''.format(
                                    fillColorRGB = fillColorRGB,
                                    fillOpacity=fillOpacity,
                                    strokeColorRGB=strokeColorRGB,
                                    strokeOpacity=strokeOpacity,
                                    strokeWidth =strokeWidth,
                            )
                    returnStyleDefault = False
                
                elif str(style.symbol().type()) == 'SymbolType.Line':
                    lineStyle = '''
                        line: {{
                                    fill: {{
                                        color: '{fillColorRGB}',
                                        opacity: {fillOpacity},
                                    }},
                                    stroke: {{
                                        color: '{strokeColorRGB}',
                                        opacity: {strokeOpacity},
                                        width: {strokeWidth}, 
                                    }}
                                }}
                    '''.format(
                                    fillColorRGB = fillColorRGB,
                                    fillOpacity=fillOpacity,
                                    strokeColorRGB=strokeColorRGB,
                                    strokeOpacity=strokeOpacity,
                                    strokeWidth =strokeWidth,
                            )
                    returnStyleDefault = False
                
                elif str(style.symbol().type()) == 'SymbolType.Marker':
                    pointStyle = '''
                        point: {{
                                    fill: {{
                                        color: '{fillColorRGB}',
                                        opacity: {fillOpacity},
                                    }},
                                    stroke: {{
                                        color: '{strokeColorRGB}',
                                        opacity: {strokeOpacity},
                                        width: {strokeWidth}, 
                                    }}
                                }}
                    '''.format(
                                    fillColorRGB = fillColorRGB,
                                    fillOpacity=fillOpacity,
                                    strokeColorRGB=strokeColorRGB,
                                    strokeOpacity=strokeOpacity,
                                    strokeWidth =strokeWidth,
                            )
                    returnStyleDefault = False
                
                else:
                    continue
           
            APICNIGStyle = '''new IDEE.style.Generic({{
                                        {point},
                                        {polygon},
                                        {line}
                            }})'''.format(
                                    point = pointStyle,
                                    polygon = polygonStyle,
                                    line = lineStyle
                            )
                      
           
            # print('/////////////')

        elif typeStyle == 'categorizedSymbol':
            print('/////////////')
            APICNIGStyleCategoric = ""
            categoricList = {}
            i = 0
            for categoria in qgisLayer.renderer().categories():
                i += 1
                valueAtribute = categoria.value()
                propertiesStyle = categoria.symbol().symbolLayer(0).properties()
                print(valueAtribute , '///', propertiesStyle)

                if 'color' in propertiesStyle:
                    fillColorRGBA_list= propertiesStyle['color'].split(',')
                elif 'line_color' in propertiesStyle:
                    fillColorRGBA_list= propertiesStyle['line_color'].split(',')
                else:
                    fillColorRGBA_list= [255, 153, 0, 255/2]

                fillColorRGB = '''rgb({r}, {g}, {b})'''.format(
                    r = int(fillColorRGBA_list[0]),
                    g = int(fillColorRGBA_list[1]),
                    b = int(fillColorRGBA_list[2]),
                )
                
                fillOpacity = int(fillColorRGBA_list[3]) / 255 

                if 'outline_color' in propertiesStyle:
                    strokeColorRGBA_list= propertiesStyle['outline_color'].split(',')
                elif 'line_color' in propertiesStyle:
                    strokeColorRGBA_list= propertiesStyle['line_color'].split(',')
                else:
                    strokeColorRGBA_list= [255, 102, 0, 255]

                strokeColorRGB = '''rgb({r}, {g}, {b})'''.format(
                    r = int(strokeColorRGBA_list[0]),
                    g = int(strokeColorRGBA_list[1]),
                    b = int(strokeColorRGBA_list[2]),
                )
                strokeOpacity = int(strokeColorRGBA_list[3]) / 255 

                if 'outline_color' in propertiesStyle:
                    strokeWidth = float(propertiesStyle['outline_width'])
                else:
                    strokeWidth = float(2)
                

                categoricList[valueAtribute] = "__{}_{}__".format(legendClassificationAttribute,i)
                APICNIGStyle_category = ''' 
                                        var {legendClassificationAttribute}_{i} = new IDEE.style.Generic({{
                                            point: {{
                                                fill: {{
                                                    color: '{fillColorRGB}',
                                                    opacity: {fillOpacity},
                                                }},
                                                stroke: {{
                                                    color: '{strokeColorRGB}',
                                                    opacity: {strokeOpacity},
                                                    width: {strokeWidth}, 
                                                }}
                                            }},
                                            polygon: {{
                                                fill: {{
                                                    color: '{fillColorRGB}',
                                                    opacity: {fillOpacity},
                                                }},
                                                stroke: {{
                                                    color: '{strokeColorRGB}',
                                                    opacity: {strokeOpacity},
                                                    width: {strokeWidth}, 
                                                }}
                                            }},
                                            line: {{
                                                fill: {{
                                                    color: '{fillColorRGB}',
                                                    opacity: {fillOpacity},
                                                }},
                                                stroke: {{
                                                    color: '{strokeColorRGB}',
                                                    opacity: {strokeOpacity},
                                                    width: {strokeWidth}, 
                                                }}
                                            }}
                                        }}) \n'''.format(
                                                legendClassificationAttribute=legendClassificationAttribute,
                                                i=i,
                                                fillColorRGB = fillColorRGB,
                                                fillOpacity=fillOpacity,
                                                strokeColorRGB=strokeColorRGB,
                                                strokeOpacity=strokeOpacity,
                                                strokeWidth =strokeWidth,
                                        )

                APICNIGStyleCategoric += APICNIGStyle_category

            APICNIGStyle = """new IDEE.style.Category("{name}", {list})""".format(name=legendClassificationAttribute, list=categoricList)
            APICNIGStyle = APICNIGStyle.replace("'__","").replace("__'","")
            APICNIGStyle = [APICNIGStyle, APICNIGStyleCategoric]
            returnStyleDefault = False
            print('/////////////')

        else:
            returnStyleDefault = True

        if returnStyleDefault:
            APICNIGStyle = '''new IDEE.style.Generic({{
                                point: {{
                                    fill: {{
                                        color: '{fillColorRGB}',
                                        opacity: {fillOpacity},
                                    }},
                                    stroke: {{
                                        color: '{strokeColorRGB}',
                                        opacity: {strokeOpacity},
                                        width: {strokeWidth}, 
                                    }}
                                }},
                                polygon: {{
                                    fill: {{
                                        color: '{fillColorRGB}',
                                        opacity: {fillOpacity},
                                    }},
                                    stroke: {{
                                        color: '{strokeColorRGB}',
                                        opacity: {strokeOpacity},
                                        width: {strokeWidth}, 
                                    }}
                                }},
                                line: {{
                                    fill: {{
                                        color: '{fillColorRGB}',
                                        opacity: {fillOpacity},
                                    }},
                                    stroke: {{
                                        color: '{strokeColorRGB}',
                                        opacity: {strokeOpacity},
                                        width: {strokeWidth}, 
                                    }}
                                }}
                            }})'''.format(
                                    fillColorRGB = 'orange',
                                    fillOpacity=0.6,
                                    strokeColorRGB='red',
                                    strokeOpacity=0.8,
                                    strokeWidth = 2,
                            )
        

        return APICNIGStyle

    def CreateHTML(self, headerImports, checkBox_ComparacionMapas):

        headerImportsString = ''
        for l in headerImports:
            headerImportsString = headerImportsString + l

        body="""
        <!-- Contenedor principal del mapa -->
        <div id="mapaJS_div" class="m-container"></div>

        <!-- Importación de JS del visualizador-->
        <script type="text/javascript" src="./JS/QGIS2APIIDEE.js"></script>
        """
        CSS_MapasComparacion = ''
        JS_MapasComparacion = ''
        if checkBox_ComparacionMapas:
            CSS_MapasComparacion = """
            <!-- extensiones OL - viglino -->
            <link type="text/css" rel="stylesheet" href="./pluginQGIS2APIIDEE/viglino/CSS/ol-ext.css">
            <link type="text/css" rel="stylesheet" href="./pluginQGIS2APIIDEE/viglino/CSS/font-gis.css">
            <script type="text/javascript" src="./pluginQGIS2APIIDEE/viglino/JS/ol-ext.js"></script>

            <!-- extensiones propias de QGIS2APIIDEE (CSS) -->
            <link type="text/css" rel="stylesheet" href="./pluginQGIS2APIIDEE/comparadorMapas/CSS/comparadorMapas.css">
            """

            JS_MapasComparacion = """
            <!-- Importación de JS del visualizador-->
            <script type="text/javascript" src="./pluginQGIS2APIIDEE/comparadorMapas/JS/comparadorMapas.js"></script>
            """

            body="""
            <!-- The Modal -->
            <div id="myModal" class="modal">

                <!-- Modal content -->
                <div class="modal-content">
                    <span class="close">&times;</span>
                    <h3>Configuración de comparación</h3>

                    <table id="tablaModal">
                        <tr>
                            <th>Botón</th>
                            <th>Información</th>
                        </tr>
                        <tr>
                            <td><i class="fg-map-add"></i></td>
                            <td>Al hacer clic, abre una ventana modal para crear una nueva vista al visualizador</td>
                        </tr>
                        <tr>
                            <td><i class="fg-map-o"></i></td>
                            <td>
                                Al hacer clic, visualiza el mapa seleccionado
                            </td>
                        </tr>
                        <tr>
                            <td><i class="fg-screen-dub-o"></i></td>
                            <td>
                                Permite la comparación en espejo.
                                Se divide el visualizador en dos partes donde se puede comparar de forma síncrona dos mapas
                            </td>
                        </tr>
                        <tr>
                            <td><i class="fg-screen-split-h"></i></td>
                            <td>
                                Permite al comparación en cortina horizontal.
                                Se divide el visualizador superponiendo los dos mapas entre si, pudiendo ver la misma extensión
                                en los dos mapas
                            </td>
                        </tr>
                        <tr>
                            <td><i class="fg-screen-split-v"></i></td>
                            <td>
                                Permite al comparación en cortina vertical.
                                Se divide el visualizador superponiendo los dos mapas entre si, pudiendo ver la misma extensión
                                en los dos mapas
                            </td>
                        </tr>
                        <tr>
                            <td><i class="fg-screen-mag"></i></td>
                            <td>
                                Permite la comparación zonal.
                                Habilita un círculo que permite comparar los dos mapas según se mueve el ratón.
                            </td>
                        </tr>
                        <tr>
                            <td><i class="fg-map-options-alt"></i></td>
                            <td>
                                Permite configurar los mapas a visualizar en cada sección de comparación.
                            </td>
                        </tr>
                    </table>
                </div>

            </div>

            <!-- The Sidenav -->
            <div id="mySidenav" class="sidenav">

                <div class="grid-container">
                    <h3 style="padding-left: 10px;">Configuración comparación</h3>
                    <a href="javascript:void(0)" class="closebtn">&times;</a>
                </div>


                <table id="tablaConfig">
                    <tr>
                        <th>Botón</th>
                        <th>Configuración</th>
                    </tr>
                    <tr id="table_view1" class="activeTable">
                        <td><i class="fg-map-o"></i></td>
                        <td>
                            <div class="grid-container">
                                <p>Mapa:</p>
                                <select id="selectorMapasUnico" class="selectorMapasClase" name="Selector de mapa">

                                </select>
                            </div>
                        </td>
                    </tr>
                    <tr id="table_compare">
                        <td><i class="fg-screen-dub-o"></i></td>
                        <td>
                            <div class="grid-container">
                                <p>Mapa derecho:</p>
                                <select id="selectorMapasEspejoDer" class="selectorMapasClase" name="Selector de mapa">

                                </select>
                                <p>Mapa izquierdo:</p>
                                <select id="selectorMapasEspejoIzq" class="selectorMapasClase" name="Selector de mapa">

                                </select>
                            </div>
                        </td>
                    </tr>
                    <tr id="table_swipev">
                        <td><i class="fg-screen-split-h"></i></td>
                        <td>
                            <div class="grid-container">
                                <p>Mapa derecho:</p>
                                <select id="selectorMapasHCortinillaDer" class="selectorMapasClase" name="Selector de mapa">

                                </select>
                                <p>Mapa izquierdo:</p>
                                <select id="selectorMapasHCortinillaIzq" class="selectorMapasClase" name="Selector de mapa">

                                </select>
                            </div>
                        </td>
                    </tr>
                    <tr id="table_swipeh">
                        <td><i class="fg-screen-split-v"></i></td>
                        <td>
                            <div class="grid-container">
                                <p>Mapa arriba:</p>
                                <select id="selectorMapasVCortinillaIzq" class="selectorMapasClase" name="Selector de mapa">

                                </select>
                                <p>Mapa abajo:</p>
                                <select id="selectorMapasVCortninillaDer" class="selectorMapasClase" name="Selector de mapa">

                                </select>
                            </div>
                        </td>
                    </tr>
                    <tr id="table_clip">
                        <td><i class="fg-screen-mag"></i></td>
                        <td>
                            <div class="grid-container">
                                <p>Mapa fondo:</p>
                                <select id="selectorMapasCirculoFondo" class="selectorMapasClase" name="Selector de mapa">

                                </select>
                                <p>Mapa círculo:</p>
                                <select id="selectorMapasCirculoCir" class="selectorMapasClase" name="Selector de mapa">

                                </select>
                            </div>
                        </td>
                    </tr>
                </table>

                <div class="grid-container">
                    <p></p>
                    <button id="idAceptar" class="aceptar">aceptar</button>
                </div>
            </div>



            <!-- div comparación -->
            <div class="tools">
                <i id="addMap" class="fg-map-add" onclick="setMode('addMap')" title="Añadir mapa"></i>
                <i id="view1" class="fg-map-o activeSVG" onclick="setMode('view1')" title="Mapa único"></i>
                <i id="compare" class="fg-screen-dub-o" onclick="setMode('compare')" title="Compare"></i>
                <i id="swipev" class="fg-screen-split-h" onclick="setMode('swipev')" title="Swipe V"></i>
                <i id="swipeh" class="fg-screen-split-v" onclick="setMode('swipeh')" title="Swipe V"></i>
                <i id="clip" class="fg-screen-mag" onclick="setMode('clip')" title="Clip"></i>
                <i id="settings" class="fg-map-options-alt" onclick="setMode('settings')" title="configuración"></i>
                <i id="info" class="fg-poi-info-o" onclick="setMode('info')" title="info"></i>
            </div>

            <!-- Contenedor principal del mapa -->
            <div id="compareMaps">

                <div id="mapaJS_div" class="m-container m-mapea-container compareMaps" 
                    style="z-index: 1;"
                    >
                </div>
                <div id="mapaJS_div_2" class="m-container m-mapea-container compareMaps" 
                    style="z-index: 0;"
                    >
                </div>
                <div id="mapaJS_div_n" class="m-container m-mapea-container compareMaps" 
                    style="z-index: -1;"
                    >
                </div>

            </div>

            <!-- Importación de JS del visualizador-->
            <script type="text/javascript" src="./JS/QGIS2APIIDEE.js"></script>
            """


        html = """<!DOCTYPE html>
                    <html>
                        <head>
                            <meta charset="UTF-8">
                            <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
                            <meta http-equiv="X-UA-Compatible" content="IE=edge" />
                            <meta name="cnig" content="yes">
                            <title>Visualizador API-IDEE</title>
                            
                            <!--          -->
                            <!-- API-IDEE -->
                            <!--          -->

                            <!-- CSS API-IDEE -->
                            <link type="text/css" rel="stylesheet" href="https://componentes.idee.es/api-idee/assets/css/apiidee-1.0.0.ol.min.css">
                            
                            <!-- JS API-IDEE  -->
                            <script type="text/javascript" src="https://componentes.idee.es/api-idee/vendor/browser-polyfill.js"></script>
                            <script type="text/javascript" src="https://componentes.idee.es/api-idee/js/apiidee-1.0.0.ol.min.js"></script>
                            <script type="text/javascript" src="https://componentes.idee.es/api-idee/js/configuration-1.0.0.js"></script>

                            <!-- extensiones API-IDEE -->
                            {headerImports}

                            {CSS_MapasComparacion}


                            <!-- Estilo personalizado del HTML-->
                            <link type="text/css" rel="stylesheet" href="./CSS/QGIS2APIIDEE.css">
                            
                        </head>
                        
                        <body>
                            {body}

                            {JS_MapasComparacion}

                        </body>
                    </html>""".format(
                                    headerImports=headerImportsString,
                                    CSS_MapasComparacion=CSS_MapasComparacion,
                                    JS_MapasComparacion=JS_MapasComparacion,
                                    body=body
                                )
        return html

    def CreateJS(self, bbox, layers, controls, plugins):

        layersString = ''
        for l in layers:
            layersString = layersString + l

        pluginString = ''
        for l in plugins:
            pluginString = pluginString + l
        
        JS = """
                                
            // Configuración del mapa
            let zoomInicial = 5
            let longLatInicial = [-3, 40]
            const zoom_p = IDEE.config.MAP_VIEWER_ZOOM || zoomInicial;
            const center_p = IDEE.config.MAP_VIEWER_CENTER || ol.proj.fromLonLat(longLatInicial);
            
            IDEE.proxy(false) // Necesario para ejecutar el visualizador en local.
            const mapajs = IDEE.map({{
                container: 'mapaJS_div',
                controls: {controls},
                bbox: {bbox}
            }});
            
            const layers_p = IDEE.config.MAP_VIEWER_LAYERS || [];
            mapajs.addLayers(layers_p)

            {layers}

            {plugins}
                                        
        """.format(
                    bbox = bbox,
                    controls=controls,
                    layers = layersString,
                    plugins = pluginString                
                    )
        return JS
    
    def CreateCSS(self):

        CSS = """
                html,
                body {
                    margin: 0;
                    padding: 0;
                    height: 100%;
                    overflow: hidden;
                }

                .m-panel button, 
                .m-panel.m-plugin-layerswitcher.opened button.m-panel-btn, 
                .m-areas>div.m-area>div.m-panel.collapsed>button.m-panel-btn,
                .ol-zoomslider>button.ol-zoomslider-thumb,
                .m-areas>div.m-area>div.m-panel.no-collapsible>div.m-panel-controls>div.m-control.m-container.m-background>button,
                .m-scale-container {
                    background-color: orange !important;
                }

                .m-areas>div.m-area>div.m-panel.no-collapsible>div.m-panel-controls>div.m-control.m-container.m-background>button.m-background-group-btn.activeBaseLayerButton{
                    background-color: #cd7d00 !important;
                }

                .ol-scale-line .ol-scale-line-inner {
                    border-color: orange;
                    color: orange;
                    font-weight: 700;
                }

                .ol-scale-line.ol-unselectable {
                    background: white !important;
                }
  

                .m-panel section button {
                    background-color: transparent !important;
                }
        """
        return CSS